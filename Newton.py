'''
Arlan Vincent Uy
2015-09385
CS 131 THU
'''

'''
Juico, Jules Gerard E.
2014-40314
CS 131 THU
'''

import math

'''
Input: No paramters but reads from a file input. First line contains integer a, second line contains integer b, third line contains integer c. There are 3 provided input files, namely, Ninput1.txt, Ninput2.txt, and Ninput3.txt
Output: None, but it directly prints the result of the function.
Method: Computes for a^(m/n) by the iterative method of Newton's Raphson until a certain threshold is met.
'''
def NewtonExponentiation():

	file = open("Ninput1.txt", "r")
	a = int(file.readline().replace('\n',''))
	m = int(file.readline().replace('\n',''))
	n = int(file.readline().replace('\n',''))

	x_current = 0
	x_next = a

	while(abs(x_current - x_next) > 0.0000001):
		x_current = x_next 
		x_next = x_current - ( ((x_current ** n) - (a ** m)) / (n * (x_current ** (n - 1))) )
		
	print("{}^({}/{}) = {}".format(a, m, n, x_next))

'''
Input: Receives parameter x0 (the input x in arcsin(x)) which could be changed by the user in the last line of this source code
Output: None, but directly prints the result of the function
Method: Computes for arcsin(x). The data points are generated inversely such that we generate arcsin(x) first by using common angles in trigonometric functions. x is then generated by using sin(x) to the arcsin(x) because we cannot use inverse trigonometric functions. Then Newton's method is performed accordingly.
'''
def NewtonTrigonometric(x0):

	x = []
	y = [0, (math.pi / 12), (math.pi / 6), (math.pi / 4), (math.pi / 3), (math.pi / 2)]
	
	divideddifferencetable = [] 
	new = [] 
	
	for z in y:
		x.append(math.sin(z))

	divideddifferencetable.append(y) 
	 
	z = 1
	while (len(new) != 1): 
		 
		length = len(y) 
		new = []
		
		for i in range(1, length): 
			new.append((y[i] - y[i-1]) / (x[i] - x[i-z]))
		z = z + 1
		divideddifferencetable.append(new) 
		y = new
	 
	mult = [] 
	p = divideddifferencetable[0][0] 
	s = 0 
	z = 1 

	for i in range(1, len(divideddifferencetable)): 
		s = divideddifferencetable[i][0] 
		for j in range(0, z): 
			s = s*(x0 - x[j]) 
		p = p + s 
		s = 0 
		z =  z + 1 
	 
	print("arcsin({}) = {}".format(x0, p)) 




print("Item a:")
NewtonExponentiation()
print("\nItem b:")
NewtonTrigonometric(math.pi/11) #Change input to desired user input